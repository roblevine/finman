services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: finman
      POSTGRES_USER: finman
      POSTGRES_PASSWORD: finman_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finman -d finman"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - finman-network

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=finman;Username=finman;Password=finman_dev_password
    ports:
      - "5001:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - finman-network

  # API Gateway - ready for future implementation
  # api-gateway:
  #   build:
  #     context: ./services/api-gateway
  #     dockerfile: Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ASPNETCORE_URLS=http://+:8080
  #   ports:
  #     - "5000:8080"
  #   depends_on:
  #     - user-service

  # Frontend - ready for future implementation
  # frontend:
  #   build:
  #     context: ./services/frontend
  #     dockerfile: Dockerfile
  #   environment:
  #     - NODE_ENV=development
  #     - NEXT_PUBLIC_API_URL=http://localhost:5000
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - api-gateway

volumes:
  postgres_data:

networks:
  finman-network:
    external: true
    name: finman-network
